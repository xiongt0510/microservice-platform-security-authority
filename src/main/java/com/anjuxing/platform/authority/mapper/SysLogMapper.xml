<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.anjuxing.platform.authority.mapper.SysLogMapper" >
  <resultMap id="sysLogMap" type="com.anjuxing.platform.authority.model.SysLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="target_id" property="targetId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP"></result>
    <result column="creator" property="creator" jdbcType="VARCHAR"></result>
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.anjuxing.platform.authority.model.SysLogWithBLOBs" extends="sysLogMap" >
    <result column="old_value" property="oldValue" jdbcType="LONGVARCHAR" />
    <result column="new_value" property="newValue" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, type, target_id, creator, create_time, status
  </sql>
  <sql id="Blob_Column_List" >
    old_value, new_value
  </sql>
  <select id="findById" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sys_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="delete" parameterType="java.lang.Integer" >
    delete from sys_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="save" parameterType="com.anjuxing.platform.authority.model.SysLogWithBLOBs" keyProperty="id" useGeneratedKeys="true" >
    insert into sys_log (id, type, target_id, 
      creator, create_time,
      status, old_value, new_value
      )
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{targetId,jdbcType=INTEGER}, 
      #{creator,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{status,jdbcType=INTEGER}, #{oldValue,jdbcType=LONGVARCHAR}, #{newValue,jdbcType=LONGVARCHAR}
      )
  </insert>

  <update id="updateSelective" parameterType="com.anjuxing.platform.authority.model.SysLogWithBLOBs" >
    update sys_log
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="targetId != null" >
        target_id = #{targetId,jdbcType=INTEGER},
      </if>

      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="oldValue != null" >
        old_value = #{oldValue,jdbcType=LONGVARCHAR},
      </if>
      <if test="newValue != null" >
        new_value = #{newValue,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="update" parameterType="com.anjuxing.platform.authority.model.SysLogWithBLOBs" >
    update sys_log
    set type = #{type,jdbcType=INTEGER},
      target_id = #{targetId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      old_value = #{oldValue,jdbcType=LONGVARCHAR},
      new_value = #{newValue,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateSysLog" parameterType="com.anjuxing.platform.authority.model.SysLog" >
    update sys_log
    set type = #{type,jdbcType=INTEGER},
      target_id = #{targetId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="countBySearchDto" parameterType="map" resultType="int">
    SELECT count(1)
    FROM sys_log
    <include refid="queryConditions" />
  </select>

  <select id="findBySearchDto" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT <include refid="Base_Column_List" />,<include refid="Blob_Column_List" />
    FROM sys_log
    <include refid="queryConditions" />
    ORDER BY create_time DESC

  </select>

  <sql id="queryConditions">
    <where>
      <if test="dto.type != null">
        AND type = #{dto.type}
      </if>
      <if test="dto.beforeSeg != null and dto.beforeSeg != ''">
        AND old_value like #{dto.beforeSeg}
      </if>
      <if test="dto.afterSeg != null and dto.afterSeg != ''">
        AND new_value like #{dto.afterSeg}
      </if>
      <if test="dto.operator != null and dto.operator != ''">
        AND creator like #{dto.creator}
      </if>
      <if test="dto.fromTime != null">
        AND create_time &gt;= #{dto.fromTime}
      </if>
      <if test="dto.toTime != null">
        AND create_time &lt;= #{dto.toTime}
      </if>
    </where>
  </sql>
</mapper>